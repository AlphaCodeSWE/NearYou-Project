version: "3.9"

services:
  app:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
    command: sleep infinity
    privileged: true

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.4
    env_file:
      - .env
    volumes:
      - ../certs:/bitnami/kafka/config/certs
      - ../client_config:/opt/client_config:ro
      - kafka_data:/bitnami/kafka
    environment:
      - KAFKA_ENABLE_KRAFT=false
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=no
      - KAFKA_CFG_LISTENERS=SSL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=SSL://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=SSL
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=SSL:SSL
      - KAFKA_CFG_SSL_KEYSTORE_LOCATION=/bitnami/kafka/config/certs/kafka.keystore.jks
      - KAFKA_CFG_SSL_KEYSTORE_PASSWORD=${KAFKA_KEYSTORE_PASS}
      - KAFKA_CFG_SSL_KEY_PASSWORD=${KAFKA_KEYSTORE_PASS}
      - KAFKA_CFG_SSL_TRUSTSTORE_LOCATION=/bitnami/kafka/config/certs/kafka.truststore.jks
      - KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD=${KAFKA_KEYSTORE_PASS}
      - KAFKA_CFG_SSL_KEYSTORE_TYPE=PKCS12
      - KAFKA_CFG_SSL_TRUSTSTORE_TYPE=PKCS12
      - KAFKA_CFG_SSL_CLIENT_AUTH=required
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper

  hivemq:
    image: hivemq/hivemq-ce:latest
    ports:
      - "1883:1883"
      - "8083:8083"

  nifi:
    image: apache/nifi:latest
    environment:
      - NIFI_WEB_HTTP_PORT=8081
    ports:
      - "8081:8081"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_INSTALL_PLUGINS=vertamedia-clickhouse-datasource
    depends_on:
      - clickhouse
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse-server
    environment:
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=pwe@123@l@
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"

  init_clickhouse:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
    command: bash -c "chmod +x /workspace/.devcontainer/scripts/init_clickhouse.sh && /workspace/.devcontainer/scripts/init_clickhouse.sh"
    depends_on:
      - clickhouse
    restart: "no"

  producer:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - ../certs:/workspace/certs:ro
    command: python3 /workspace/src/producer.py
    depends_on:
      - kafka
    restart: "no"

  consumer:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - ../certs:/workspace/certs:ro
    command: python3 /workspace/src/consumer.py
    depends_on:
      - kafka
      - clickhouse
    restart: "no"

  generate_users:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
    command: python3 /workspace/src/generate_users.py
    depends_on:
      - clickhouse
    restart: "no"

  postgres:
    image: postgis/postgis:15-3.3
    container_name: postgres-postgis
    environment:
      - POSTGRES_USER=nearuser
      - POSTGRES_PASSWORD=nearypass
      - POSTGRES_DB=near_you_shops
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  init_postgres:
    image: postgis/postgis:15-3.3
    container_name: init-postgres
    depends_on:
      - postgres
    volumes:
      - ./scripts/init_postgres.sh:/docker-entrypoint-initdb.d/init_postgres.sh
    command: ["bash", "-c", "chmod +x /docker-entrypoint-initdb.d/init_postgres.sh && /docker-entrypoint-initdb.d/init_postgres.sh"]
    restart: "no"

  airflow-postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow_pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  airflow-redis:
    image: redis:latest
    restart: unless-stopped

  airflow-init:
    image: apache/airflow:2.5.0
    depends_on:
      - airflow-postgres
      - airflow-redis
    environment:
      - AIRFLOW_HOME=/opt/airflow_home
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    volumes:
      - airflow_data:/opt/airflow_home
    command: ["airflow", "db", "init"]
    restart: "no"

  airflow-webserver:
    image: apache/airflow:2.5.0
    depends_on:
      - airflow-postgres
      - airflow-redis
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=uZ8CGq56QQcjCUGqj-ESyppA95968on1VGu1PTTPw30=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW_HOME=/opt/airflow_home
      - AIRFLOW__WEBSERVER__WEB_SERVER_PORT=8082
    volumes:
      - airflow_data:/opt/airflow_home
    ports:
      - "8080:8080"
    security_opt:
      - seccomp:unconfined
    command: ["webserver", "-p", "8080"]
    restart: unless-stopped

  airflow-scheduler:
    image: apache/airflow:2.5.0
    user: root
    entrypoint: ""
    depends_on:
      - airflow-webserver
      - airflow-postgres
      - airflow-redis
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW_HOME=/opt/airflow_home
    volumes:
      - airflow_data:/opt/airflow_home
      - ./scripts/entrypoint.sh:/entrypoint.sh
    security_opt:
      - seccomp:unconfined
    command: ["/bin/bash", "-c", "chmod +x /entrypoint.sh && /bin/bash /entrypoint.sh"]
    restart: unless-stopped






  airflow-worker:
    image: apache/airflow:2.5.0
    depends_on:
      - airflow-scheduler
      - airflow-postgres
      - airflow-redis
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW_HOME=/opt/airflow_home
    volumes:
      - airflow_data:/opt/airflow_home
    security_opt:
      - seccomp:unconfined
    command: ["celery", "worker"]
    restart: unless-stopped

volumes:
  kafka_data:
  clickhouse_data:
  grafana_data:
  postgres_data:
  airflow_pgdata:
  airflow_data:
